# CUDA 11.3, PyTorch, zsh, pyenv, vnc
# See -> https://hub.docker.com/r/naruya/dl_remote

# [1] https://github.com/robbyrussell/oh-my-zsh
# [2] https://github.com/pyenv/pyenv/wiki/common-build-problems
# [3] https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/dockerfiles/dockerfiles/devel-gpu-jupyter.Dockerfile


# CUDA (from [3]) ################################
ARG ARCH=
ARG UBUNTU_VERSION=20.04
ARG CUDA=11.3
# FROM nvidia/cuda${ARCH:+-$ARCH}:${CUDA}.1-base-ubuntu${UBUNTU_VERSION} as base

FROM nvidia/cuda:11.0.3-cudnn8-devel-ubuntu20.04 as base


ENV TZ=Asia/Tokyo
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

################################

WORKDIR /root
ENV DEFAULT_USER=root
ENV DEFAULT_USER_HOME=/root

# zsh (from [1]) for root----------------
RUN apt-get update -q \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    wget \
    git \
    zsh \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

SHELL ["/bin/zsh", "-c"]
RUN wget http://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | zsh

# pyenv (from [2]) ----------------
ARG PYTHON_VERSION=3.8.0

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y \
    build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev \
    libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
    xz-utils tk-dev libffi-dev liblzma-dev python-openssl git
RUN curl https://pyenv.run | zsh && \
    echo 'export PATH="${DEFAULT_USER_HOME}/.pyenv/bin:$PATH"' >> ${DEFAULT_USER_HOME}/.zshrc && \
    echo 'eval "$(pyenv init -)"' >> ${DEFAULT_USER_HOME}/.zshrc && \
    echo 'eval "$(pyenv virtualenv-init -)"' >> ${DEFAULT_USER_HOME}/.zshrc
RUN source ${DEFAULT_USER_HOME}/.zshrc && \
    pyenv install ${PYTHON_VERSION} && \
    pyenv global ${PYTHON_VERSION} && \
    pip install -U pip

# X window ----------------
RUN apt-get update && apt-get install -y \
    xvfb x11vnc python-opengl icewm \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# utils ----------------
RUN apt-get update -q \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    curl \
    git \
    unzip \
    vim \
    wget \
    ffmpeg \
    tmux \
    htop \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

COPY .tmux.conf ${DEFAULT_USER_HOME}/

# DL ----------------
# RUN source ${DEFAULT_USER_HOME}/.zshrc && \
#     pip install \
#     setuptools \
#     jupyterlab \
#     widgetsnbextension \
#     && \
#     echo 'alias jl="DISPLAY=:0 jupyter lab --ip 0.0.0.0 --port 8888 --allow-root &"' >> ${DEFAULT_USER_HOME}/.zshrc && \
#     echo 'alias tb="tensorboard --logdir runs --bind_all &"' >> ${DEFAULT_USER_HOME}/.zshrc

# RUN source ${DEFAULT_USER_HOME}/.zshrc && \
#     pip install gym

# MuJoCo ----------------
RUN apt-get update -q \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    curl \
    git \
    libx11-dev \
    xorg-dev \
    libglu1-mesa \
    libglu1-mesa-dev \
    libgl1-mesa-dev \
    libgl1-mesa-glx \
    libglew-dev \
    libosmesa6 \
    libosmesa6-dev \
    libglfw3 \
    libglfw3-dev \
    patchelf \
    software-properties-common \
    net-tools \
    unzip \
    vim \
    virtualenv \
    wget \
    xpra \
    xserver-xorg-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN curl -o /usr/local/bin/patchelf https://s3-us-west-2.amazonaws.com/openai-sci-artifacts/manual-builds/patchelf_0.9_amd64.elf \
    && chmod +x /usr/local/bin/patchelf

ENV LANG C.UTF-8

RUN mkdir -p /root/.mujoco \
    && wget https://mujoco.org/download/mujoco210-linux-x86_64.tar.gz -O mujoco.tar.gz \
    && tar -xf mujoco.tar.gz -C /root/.mujoco \
    && rm mujoco.tar.gz \
    && cd /root/.mujoco \
    && git clone https://github.com/openai/mujoco-py.git

ENV MUJOCO_GL osmesa
ENV MJLIB_PATH /root/.mujoco/mujoco210/bin/libmujoco210.so
ENV MUJOCO_PY_MUJOCO_PATH /root/.mujoco/mujoco210/bin
ENV MUJOCO_PY_MJPRO_PATH /root/.mujoco/mujoco210/
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib64:${MUJOCO_PY_MUJOCO_PATH}:${LD_LIBRARY_PATH}
ENV LD_PRELOAD /usr/lib/x86_64-linux-gnu/libGLEW.so

# Workaround for https://bugs.launchpad.net/ubuntu/+source/nvidia-graphics-drivers-375/+bug/1674677
RUN cp /root/.mujoco/mujoco-py/vendor/Xdummy /usr/local/bin/Xdummy && \
    cp /root/.mujoco/mujoco-py/vendor/10_nvidia.json /usr/share/glvnd/egl_vendor.d/10_nvidia.json
RUN chmod +x /usr/local/bin/Xdummy

# Tensorflow ----------------
RUN source ${DEFAULT_USER_HOME}/.zshrc && \
    pip install \
    tensorflow-gpu==2.4.2

RUN source ${DEFAULT_USER_HOME}/.zshrc && \
    cd /root/.mujoco/mujoco-py && \
    pip install --no-cache-dir -r requirements.txt
RUN source ${DEFAULT_USER_HOME}/.zshrc && \
    cd /root/.mujoco/mujoco-py && \
    pip install --no-cache-dir -r requirements.dev.txt
RUN source ${DEFAULT_USER_HOME}/.zshrc && \
    cd /root/.mujoco/mujoco-py && \
    ${DEFAULT_USER_HOME}/.pyenv/shims/python setup.py install

# dependencies for dreamer v2
RUN source ${DEFAULT_USER_HOME}/.zshrc && \
    pip install --no-cache-dir \
    gym \
    atari_py \
    opensimplex==0.3 \
    numpy==1.19.2 \
    crafter \
    dm_control \
    ruamel.yaml==0.16.13 \
    tensorflow_probability==0.12.2

# other utils
RUN source ${DEFAULT_USER_HOME}/.zshrc && \
    pip install --no-cache-dir \
    matplotlib \
    opencv-python \
    tqdm \
    mlflow \
    hydra-core \
    wandb \
    nvitop

# auto start tmux and zsh
ENTRYPOINT tmux new \; \
    send-keys 'Xvfb :0 -screen 0 1400x900x24 & ' Enter \; \
    send-keys 'x11vnc -display :0 -passwd 0123 -forever &' Enter \; \
    split-window -v  \; \
    send-keys "zsh" Enter \; \
    send-keys "jupyter nbextension enable --py widgetsnbextension --sys-prefix" Enter \; \
    send-keys "bash ${DEFAULT_USER_HOME}/run-jupyter.sh" Enter \; \
    new-window \; \
    send-keys "zsh" Enter \; \
    send-keys clear C-m \;
